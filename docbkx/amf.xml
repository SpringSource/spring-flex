<?xml version="1.0" encoding="UTF-8"?>
<chapter id="amf">
    <title>Enhanced AMF Support</title>
    <sect1 id="amf-introduction">
        <title>Customizing AMF Conversion</title>
        <para>
            While BlazeDS provides excellent support for serialization/deserialization between Java beans and AMF, there are certain limitations in the 
            types of objects that can be handled out-of-the-box.  For example, objects to be converted to/from AMF must have getter and setter methods and must 
            have a public no-arg constructor.  In order to allow for a more flexible approach, we have provided an extension mechanism for easily customizing 
            the AMF type conversion process through Spring configuration.  
        </para>
        <sect2 id="amf-config-processor">
            <title>Configuring AMF Type Conversion</title>
            <para> 
                A special Spring-aware <code>PropertyProxy</code> (a BlazeDS-specific interface for customizing serialization) is provided that uses Spring's
                <code>PropertyAccessor</code> interface for type introspection and delegates to the Spring 3+ <code>ConversionService</code> to allow for
                additional property conversion logic to be plugged in during the serialization/deserialization process. This enhanced <code>PropertyProxy</code> 
                optionally supports:
            </para>
            <itemizedlist>
                <listitem><para>Direct field access for properties (instead of requiring getters and setters)</para></listitem>
                <listitem><para>Use of an alternate constructor annotated with <code>@AmfCreator</code> for deserialization (instead of a public no-arg constructor)</para></listitem>
                <listitem><para>Ignoring certain properties during serialization and/or deserialization when marked with <code>@AmfIgnore</code> or <code>@AmfIgnoreField</code></para></listitem>
            </itemizedlist>
            <para>
                To take advantage of the enhanced AMF support, an instance of <code>SpringPropertyProxy</code> must be registered for each individual type that
                could potentially be converted to/from AMF. A specialized set of <code>MessageBrokerConfigProcessors</code> are provided that take varied
                approaches to locating the types to be registered:
            </para>
            <para>
                <table id="amf-configprocessors">
                  <title>AMF Handling MessageBrokerConfigProcessors</title>
                    <tgroup cols="2" align="left">
                        <colspec colnum="1" colname="col1" colwidth="2*" />
                        <colspec colnum="2" colname="col2" colwidth="2*" />
                        <thead>
                            <row>
                                <entry align="center">Class</entry>
                                <entry align="center">Implementation</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>org.springframework.flex.core.io.
                                    HibernateConfigProcessor</entry>
                                <entry>Uses the Hibernate metadata API to locate mapped Hibernate types to register for AMF conversion and configures specialized Hibernate <code>Converters</code>. See <xref linkend="hibernate-introduction" /></entry>                 
                            </row>
                            <row>
                                <entry>org.springframework.flex.core.io.
                                    JpaHibernateConfigProcessor</entry>
                                <entry>Uses the Hibernate metadata API to locate mapped Hibernate JPA types to register for AMF conversion and configures specialized Hibernate <code>Converters</code>. See <xref linkend="hibernate-introduction" /></entry>
                            </row>
                            <row>
                                <entry>org.springframework.flex.core.io.
                                    ClassPathScanningAmfConversionService
                                    ConfigProcessor</entry>
                                <entry>Uses classpath scanning to locate types to register for AMF conversion. See <xref linkend="amf-classpath-scanning" /></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table> 
            </para>
            <para>
                Explicit configuration of one of these classes is done just as with any other <code>MessageBrokerConfigProcessor</code>, by defining the desired
                implementation as a bean and wiring it into the <code>MessageBroker</code> using the <code>config-processor</code> namespace tag.
            </para>
            <sect3 id="field-mapping">
                <title>Using Direct Field Mapping</title>
                <para>
                    By default, the <code>SpringPropertyProxy</code> will read and write property values during AMF conversion using JavaBean standard get and
                    set methods, just as the default BlazeDS <code>BeanProxy</code> does. Alternatively, you many configure it to access fields directly. This
                    is useful in such cases as when you have a class that does not expose public getter or setter methods, such as the following:
                </para>
                <programlisting language="java">
                <![CDATA[
@Entity
public class PackagePrivatePerson {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    Integer id;

    @Version
    @Column(name = "version")
    Integer version;

    String name;
}
                ]]>
                </programlisting>
                <para>
                    In order to be able to convert such a class to/from AMF, you must configure the <code>useDirectFieldAccess</code> property of one of the
                    supplied AMF configuration processors.  For example:
                </para>
                <programlisting language="xml" >
                <![CDATA[
<flex:message-broker>
    <flex:config-processor ref="myJpaConfigProcessor" />
</flex:message-broker>

<bean id="myJpaConfigProcessor" class="org.springframework.flex.core.io.JpaConfigProcessor">
    <property name="useDirectFieldAccess" value="true" />
</bean>                
                ]]>
                </programlisting>
            </sect3>
            <sect3 id="amf-creator-mapping">
                <title>Deserializing Immutable Objects with @AmfCreator</title>
                <para>
                    By default, the <code>SpringPropertyProxy</code> will try to instantiate types using a public no-arg constructor during the AMF 
                    deserialization process.  Types that do not have a no-arg constructor must provide an alternate constructor annotated with 
                    <code>org.springframework.flex.core.io.AmfCreator</code>, whose properties are in turn annotated with 
                    <code>org.springframework.flex.core.io.AmfProperty</code>, in order to be eligible for AMF conversion.  For example:  
                </para>
                <programlisting language="java">
                <![CDATA[
public class ImmutableValueObject {

    final String foo;

    final Integer zoo;

    @AmfCreator
    public ImmutableValueObject(@AmfProperty("foo") String foo, @AmfProperty("zoo") Integer zoo) {
        this.foo = foo;
        this.zoo = zoo;
    }

    public String getFoo() {
        return this.foo;
    }

    public Integer getZoo() {
        return this.zoo;
    }
}
                ]]>
                </programlisting>
            </sect3>
            <sect3 id="amf-ignoring-properties">
                <title>Ignoring Properties During AMF Conversion</title>
                <para>
                    Sometimes it is desirable to ignore certain properties during serialization and/or deserialization. For example, there may be a property in
                    your Java object that you do not wish to ever send to the Flex client. <code>SpringPropertyProxy</code> provides a means of achieving this
                    by adding some additional annotations to your Java objects. 
                </para>
                <para>
                    The annotation <code>org.springframework.flex.core.io.AmfIgnore</code> may be used on getter and setter methods.  Annotating a getter method
                    with <code>@AmfIgnore</code> will cause the property to be ignored during serialization to AMF, and annotating a setter method with 
                    <code>@AmfIgnore</code> will cause the property to be ignored during deserialization from AMF.  For example:
                </para>
                <programlisting language="java">
                <![CDATA[
public class IgnorablePropsObject {

    //Will be ignored on both serialization and deserialization
    private String foo;

    //Will be ignored only on serialization
    private String bar;

    //Will be ignored only on deserialization
    private String baz;

    @AmfIgnore
    public String getFoo() {
        return foo;
    }

    @AmfIgnore
    public void setFoo(String foo) {
        this.foo = foo;
    }

    @AmfIgnore
    public String getBar() {
        return bar;
    }

    public void setBar(String bar) {
        this.bar = bar;
    }

    public String getBaz() {
        return baz;
    }

    @AmfIgnore
    public void setBaz(String baz) {
        this.baz = baz;
    }
}                
                ]]>
                </programlisting>
                <para>
                    When using direct field mapping, the annotation <code>org.springframework.flex.core.io.AmfIgnoreField</code> may be used on fields to 
                    achieve equivalent functionality.  For example:
                </para>
                <programlisting language="java">
                <![CDATA[
public class IgnorableFieldsObject {

    //Will be ignored on both serialization and deserialization
    @AmfIgnoreField
    private String foo; 

    //Will be ignored only on serialization
    @AmfIgnoreField(onDeserialization=false)
    private String bar;

    //Will be ignored only on deserialization
    @AmfIgnoreField(onSerialization=false)
    private String baz;

}
                ]]>
                </programlisting>
            </sect3>
            <sect3 id="amf-custom-converters">
                <title>Providing Custom Converters</title>
                <para>
                    Customizing the way Java objects are converted to/from AMF is a matter of providing Spring 3 type <code>Converters</code> and registering
                    them with the <code>ConversionService</code>. The provided AMF config processors all extend from
                    <code>org.springframework.flex.core.io.AbstractAmfConversionServiceConfigProcessor</code>, which provides a template method for registering 
                    additional converters.  One such use for this would be if you wanted to use classpath scanning to locate AMF-eligible types, but still wanted 
                    to register the specialized Hibernate converters.  The following example illustrates this:
                </para>
                <para>
                    First, we configure the <code>ClassPathScanningAmfConversionServiceConfigProcessor</code> using the Spring 3 <ulink
                    url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-java" >@Configuration style</ulink>:
                </para>
                <programlisting language="java">
                <![CDATA[
package com.foo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.ConverterRegistry;
import org.springframework.flex.core.io.ClassPathScanningAmfConversionServiceConfigProcessor;
import org.springframework.flex.orm.hibernate4.io.HibernateProxyConverter;
import org.springframework.flex.core.io.PersistentCollectionConverterFactory;

@Configuration
public class CustomConverterConfiguration {

    @Bean
    public ClassPathScanningAmfConversionServiceConfigProcessor myConfigProcessor() {

        return new ClassPathScanningAmfConversionServiceConfigProcessor("com.foo.domain") {

            @Override
            protected void configureConverters(ConverterRegistry registry) {
                registry.addConverter(new HibernateProxyConverter());
                registry.addConverterFactory(new PersistentCollectionConverterFactory());
            }

        };
    }
}
                ]]>
                </programlisting>
                <para>
                    Then we simply reference that config processor as usual in our <code>MessageBroker</code> configuration:
                </para>
                <programlisting language="xml">
                <![CDATA[
<flex:message-broker>
    <flex:config-processor ref="myConfigProcessor" />
</flex:message-broker>                
                ]]>
                </programlisting>
            </sect3>
        </sect2>
    </sect1>
    <sect1 id="hibernate-introduction">
        <title>Working with Hibernate</title>
        <para>
            Using Hibernate to handle persistence concerns is quite common in Spring applications.  A common problem arises, though, when attempting to 
            directly use Hibernate-loaded entities in AMF messages with BlazeDS.  In essence, the default BlazeDS serialization mechanism tries to walk 
            the entire object graph, forcing initialization of any lazily loaded associations that might be encountered.  This generally leads either to 
            LazyInitialization errors, or (if using a solution such as Spring's <code>OpenSessionInViewFilter</code>) the undesirable n+1 selects 
            scenario.  The other problem that arises is when associations are eagerly loaded, but still wrapped in a Hibernate-specific collection or proxy, 
            which can cause unexpected results in the way the association gets serialized.   
        </para>
        <para>
            Spring BlazeDS Integration provides a simple solution that will allow the direct use of Hibernate entities in AMF messages. A few special
            Hibernate-aware <code>Converters</code> are automatically installed that understand how to properly convert Hibernate-specific types when they are
            encountered.
        </para>
        <sect2 id="hibernate-io-config">
            <title>Configuring Hibernate Entity Serialization/Deserialization Support</title>
            <para>
                The Hibernate serialization/deserialization support will be automatically configured with a default <code>ConversionService</code> upon
                application startup if Hibernate is detected on the classpath. This support is provided in the form of two different
                <code>MessageBrokerConfigProcessors</code> - one for "native" Hibernate and one for using Hibernate as a JPA provider. The proper one will be
                configured based on the presence of the JPA api on the classpath.
            </para>
            <para>
                The default behavior of the <code>SpringPropertyProxy</code> (in the case of both "native" Hibernate and JPA), when this support is configured 
                is as follows:
            </para>
            <orderedlist>
                <listitem>
                    <para>Check each bean property to see whether it is contains a Hibernate-specific Proxy or Collection</para>
                </listitem>
                <listitem>
                    <para>If the Proxy/Collection is initialized, unwrap the underlying value for serialization</para>
                </listitem>
                <listitem>
                    <para>If the Proxy/Collection is uninitialized, return <code>null</code> for the value to be serialized</para>
                </listitem>
            </orderedlist>
            <para>
                At startup time, Hibernate's Metadata API is used to determine which types to register with BlazeDS to use the specialized 
                <code>SpringPropetyProxy</code>.
            </para>
            <para>
                The default behavior may be extended/overridden by manually deploying either the <code>HibernateConfigProcessor</code>, 
                <code>JpaHibernateConfigProcessor</code>, or some other custom extension of <code>AbstractAmfConversionServiceConfigProcessor</code>  as a Spring bean and wiring it into the <code>MessageBroker</code> via the <code>config-processor</code> XML
                namespace tag as shown in <xref linkend="amf-config-processor" />.
            </para>
        </sect2>
    </sect1>
    <sect1 id="amf-classpath-scanning">
        <title>Using Classpath Scanning for AMF Configuration</title>
        <para>
            As an alternative to using the Hibernate Metadata API to find types to which the <code>SpringPropertyProxy</code> should be applied, a more general
            config processor implementation, <code>org.springframework.flex.core.io.ClassPathScanningAmfConversionServiceConfigProcessor</code>, is supplied as
            an alternative that will instead find types using Spring's internal classpath scanning support. The implementation scans recursively starting from a
            given base package, and all classes found in the scan will be registered to have the <code>SpringPropertyProxy</code> applied to them for AMF
            conversion. The scanning process may be customized further by configuring <code>org.springframework.core.type.filter.TypeFilter</code>
            implementations to either include or exclude matching types. For example, Spring provides out-of-the-box RegEx-based and Annotation-based
            <code>TypeFilter</code> implementations. The easiest way to configure this implementation is by using the Java config support provided in Spring 3+, 
            as in the following example: 
        </para>
    </sect1>
    <programlisting language="java">
    <![CDATA[
package com.foo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.converter.ConverterRegistry;
import org.springframework.core.type.filter.AnnotationTypeFilter;
import org.springframework.flex.core.io.ClassPathScanningAmfConversionServiceConfigProcessor;
import org.springframework.flex.orm.hibernate4.io.HibernateProxyConverter;
import org.springframework.flex.core.io.PersistentCollectionConverterFactory;

@Configuration
public class ApplicationConfig {

    @Bean
    public ClassPathScanningAmfConversionServiceConfigProcessor amfConfigProcessor() {
        ClassPathScanningAmfConversionServiceConfigProcessor configProcessor = 
            new ClassPathScanningAmfConversionServiceConfigProcessor("com.foo.domain") {

                @Override
                protected void configureConverters(ConverterRegistry registry) {
                    registry.addConverter(new HibernateProxyConverter());
                    registry.addConverterFactory(new PersistentCollectionConverterFactory());
                    registry.addConverter(new MyCustomConverter());
                }

            };

        configProcessor.addIncludeFilter(new AnnotationTypeFilter(MyCustomAmfAnnotation.class));    

        return configProcessor;
    } 

}
    ]]>
    </programlisting>
    <programlisting language="xml">
    <![CDATA[
<flex:message-broker>
    <flex:config-processor ref="amfConfigProcessor" />
</flex:message-broker>                
    ]]>
    </programlisting>
</chapter>
